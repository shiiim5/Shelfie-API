// <auto-generated />
using System;
using Library.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Data.Migrations
{
    [DbContext(typeof(LibraryDBContext))]
    [Migration("20250514150908_seeding")]
    partial class seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("authorsId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "authorsId");

                    b.HasIndex("authorsId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Science fiction legend",
                            ImgUrl = "/images/authors/asimov.jpg",
                            Name = "Isaac Asimov"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Physicist and cosmologist",
                            ImgUrl = "/images/authors/hawking.jpg",
                            Name = "Stephen Hawking"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Queen of Mystery",
                            ImgUrl = "/images/authors/christie.jpg",
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Biographer of geniuses",
                            ImgUrl = "/images/authors/isaacson.jpg",
                            Name = "Walter Isaacson"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Greek philosopher",
                            ImgUrl = "/images/authors/plato.jpg",
                            Name = "Plato"
                        });
                });

            modelBuilder.Entity("Library.Core.Entities.Books.AuthorOfBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorsOfBooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            BookId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            BookId = 3
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            BookId = 4
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            BookId = 5
                        });
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Isaac Asimov",
                            AvailableCopies = 5,
                            CategoryId = 1,
                            Description = "Sci-fi classic",
                            ISBN = "1111111111",
                            Quantity = 8,
                            Title = "Foundation"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Stephen Hawking",
                            AvailableCopies = 2,
                            CategoryId = 1,
                            Description = "Cosmology made easy",
                            ISBN = "2222222222",
                            Quantity = 5,
                            Title = "A Brief History of Time"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Agatha Christie",
                            AvailableCopies = 6,
                            CategoryId = 4,
                            Description = "Detective Hercule Poirot solves a case",
                            ISBN = "3333333333",
                            Quantity = 6,
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Walter Isaacson",
                            AvailableCopies = 2,
                            CategoryId = 3,
                            Description = "Biography of Steve Jobs",
                            ISBN = "4444444444",
                            Quantity = 4,
                            Title = "Steve Jobs"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Plato",
                            AvailableCopies = 7,
                            CategoryId = 5,
                            Description = "Philosophical dialogue",
                            ISBN = "5555555555",
                            Quantity = 7,
                            Title = "The Republic"
                        });
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Borrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FineAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Futuristic science & tech",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Books about past events",
                            Name = "History"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Life stories of people",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Suspense & detective fiction",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ideas, logic, and life",
                            Name = "Philosophy"
                        });
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("ImgURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Library.Core.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Library.Core.Entities.Books.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Core.Entities.Books.Author", null)
                        .WithMany()
                        .HasForeignKey("authorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Core.Entities.Books.AuthorOfBook", b =>
                {
                    b.HasOne("Library.Core.Entities.Books.Author", "author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Core.Entities.Books.Book", "book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("book");
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Book", b =>
                {
                    b.HasOne("Library.Core.Entities.Books.Category", "category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Borrow", b =>
                {
                    b.HasOne("Library.Core.Entities.Books.Book", "book")
                        .WithMany("Borrows")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Core.Entities.Users.User", "user")
                        .WithMany("borrows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Photo", b =>
                {
                    b.HasOne("Library.Core.Entities.Books.Book", "book")
                        .WithMany("photos")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Book", b =>
                {
                    b.Navigation("Borrows");

                    b.Navigation("photos");
                });

            modelBuilder.Entity("Library.Core.Entities.Books.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Core.Entities.Users.User", b =>
                {
                    b.Navigation("borrows");
                });
#pragma warning restore 612, 618
        }
    }
}
